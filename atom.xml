<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JadeStrong&#39; Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jadestrong.com/"/>
  <updated>2016-09-28T15:06:11.505Z</updated>
  <id>http://jadestrong.com/</id>
  
  <author>
    <name>JadeStrong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字谜问题求解</title>
    <link href="http://jadestrong.com/2016/09/26/%E5%AD%97%E8%B0%9C%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3/"/>
    <id>http://jadestrong.com/2016/09/26/字谜问题求解/</id>
    <published>2016-09-26T03:40:39.000Z</published>
    <updated>2016-09-28T15:06:11.505Z</updated>
    
    <content type="html"><![CDATA[<p>问题：输入是由一些字母构成的一个二维数组以及一组单词组成，目标是要找出字谜中的单词，这些单词可能是水平、垂直或演对角线上任何方向放置的。<br>求解如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> direction = [[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">-1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">-1</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">-1</span>,<span class="number">-1</span>],[<span class="number">1</span>,<span class="number">-1</span>],[<span class="number">-1</span>,<span class="number">1</span>]];</div><div class="line"><span class="keyword">var</span> input = [<span class="string">'t h i s'</span>,<span class="string">'w a t s'</span>,<span class="string">'o a h g'</span>,<span class="string">'f g d t'</span>];</div><div class="line"><span class="keyword">var</span> i,j,k,l,m,n;</div><div class="line"><span class="keyword">var</span> len;</div><div class="line"><span class="keyword">var</span> results = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> matrix = [];</div><div class="line"><span class="comment">// 将输入转换为矩阵</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = input.length;i &lt; len; i++) &#123;</div><div class="line">    matrix.push(input[i].split(<span class="string">' '</span>));</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(matrix);</div><div class="line"><span class="keyword">var</span> words = [<span class="string">'this'</span>, <span class="string">'two'</span>, <span class="string">'fat'</span>, <span class="string">'that'</span>];</div><div class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; matrix.length; j++) &#123;</div><div class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; matrix[j].length;k++) &#123;</div><div class="line">        <span class="keyword">var</span> letter = matrix[j][k];</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'letter: '</span> + letter);</div><div class="line">        <span class="keyword">for</span> (m = <span class="number">0</span>; m &lt; direction.length;m++) &#123;</div><div class="line">            <span class="keyword">var</span> dirc = direction[m];</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'current direction is: '</span> + dirc);</div><div class="line">            <span class="keyword">for</span> (l = <span class="number">0</span>; l &lt; words.length; l++) &#123;</div><div class="line">                <span class="keyword">var</span> word = words[l];</div><div class="line">                <span class="comment">// 如果单词首字母与矩阵元素匹配，则查询其各个方向</span></div><div class="line">                <span class="keyword">if</span> (word[<span class="number">0</span>] == letter) &#123;</div><div class="line">                   	<span class="built_in">console</span>.log(word + <span class="string">' first character: '</span> + word[<span class="number">0</span>]);</div><div class="line">                    <span class="keyword">var</span> x = j, y = k;</div><div class="line">                    <span class="keyword">var</span> temp = [];</div><div class="line">                    <span class="xml"><span class="comment">&lt;!-- 在这里检查矩阵边界，由于是从0开始的，所以是要小于matrix的长度，而不是小于等于 --&gt;</span></span></div><div class="line">                   for (n = 0; n <span class="tag">&lt; <span class="attr">word.length</span> &amp;&amp; <span class="attr">x</span> &gt;</span>= 0 &amp;&amp; x <span class="tag">&lt; <span class="attr">matrix.length</span> &amp;&amp;</span></div><div class="line">                       <span class="attr">y</span> &gt;= 0 &amp;&amp; y <span class="tag">&lt; <span class="attr">matrix</span>[<span class="attr">j</span>]<span class="attr">.length</span> &amp;&amp; <span class="attr">word</span>[<span class="attr">n</span>] == <span class="string">matrix[x][y];</span> </span></div><div class="line">                       <span class="attr">n</span>++, <span class="attr">x</span> += <span class="string">dirc[0],</span> <span class="attr">y</span> += <span class="string">dirc[1])</span> &#123;</div><div class="line">                        <span class="attr">console.log</span>('<span class="attr">matrix</span>[' + <span class="attr">x</span> +']['+ <span class="attr">y</span> +']<span class="attr">:</span> ' + <span class="attr">matrix</span>[<span class="attr">x</span>][<span class="attr">y</span>]);</div><div class="line">                        <span class="attr">temp.push</span>([<span class="attr">x</span>,<span class="attr">y</span>]);</div><div class="line">                    &#125;</div><div class="line">                    <span class="attr">if</span> (<span class="attr">word.length</span> == <span class="string">temp.length)</span> &#123;</div><div class="line">                        <span class="attr">results</span>[<span class="attr">word</span>] = <span class="string">temp;</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="attr">for</span> (<span class="attr">var</span> <span class="attr">z</span> = <span class="string">0;</span> <span class="attr">z</span> &lt; <span class="attr">words.length</span>; <span class="attr">z</span>++) &#123;</div><div class="line">	<span class="attr">console.log</span>(<span class="attr">words</span>[<span class="attr">z</span>] + '\' <span class="attr">result:</span> ')</div><div class="line">    <span class="attr">console.log</span>(<span class="attr">results</span>[<span class="attr">words</span>[<span class="attr">z</span>]]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个解法是检查每一个有序三元组（行、列、方向），验证是否有单词存在。如上，嵌套了大量的for循环，但这是最直观的解法。<br>可以学习到的思路是：如何处理矩阵中8个方向的遍历，我们使用代表8个方向是坐标的加减来作各个方向上的移动，然后检查边界即可。</p>
<p>也可以这样，对于每一个尚未越出谜板边缘的有序四元组（行、列、方向、字符数），我们可以测试是否所指的单词在单词表上。这也会导致大量嵌套的for循环。如果在任意单词中的最大字符数已知，那么该算法有可能节省一些时间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题：输入是由一些字母构成的一个二维数组以及一组单词组成，目标是要找出字谜中的单词，这些单词可能是水平、垂直或演对角线上任何方向放置的。&lt;br&gt;求解如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
    
      <category term="算法 数据结构" scheme="http://jadestrong.com/tags/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>选择第k个最大数</title>
    <link href="http://jadestrong.com/2016/09/26/%E9%80%89%E6%8B%A9%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E6%95%B0/"/>
    <id>http://jadestrong.com/2016/09/26/选择第k个最大数/</id>
    <published>2016-09-25T16:31:11.000Z</published>
    <updated>2016-09-28T15:10:39.118Z</updated>
    
    <content type="html"><![CDATA[<p>给定一组N个数，找出其中第k个最大数？<br>最直观的做法是对这N个数进行降序排序，然后输出第k个数即可。<br>另一种是构建一个临时数组存放取出k个数，进行降序排序,然后依次读取剩余的数，比较其与临时数组中的第k个数，若小则放弃，否则安装选择排序的思路对该数进行排序，最后将最后的一个数移除，使得数组始终保持在k个，则最终的结果即是临时数组的第k个数。<br>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> input = [];</div><div class="line"><span class="keyword">var</span> max = <span class="number">10</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> m = <span class="number">0</span>; m &lt; max; m++) &#123;</div><div class="line">	input.push(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * max));</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'full input array: '</span> + input);</div><div class="line"><span class="keyword">var</span> temp = [];</div><div class="line"><span class="keyword">var</span> k = <span class="built_in">Math</span>.floor(input.length / <span class="number">2</span>);</div><div class="line"><span class="keyword">var</span> i,j;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++) &#123;</div><div class="line">    temp.push(input.pop());</div><div class="line">&#125;</div><div class="line">temp.sort(<span class="function"><span class="keyword">function</span>(<span class="params">v1, v2</span>) </span>&#123;<span class="keyword">return</span> v2 - v1;&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Get the k elements and sort them: '</span> + temp);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Last some elemenets which will be inserted in temp: '</span> + input);</div><div class="line">input.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (item &gt; temp[k - <span class="number">1</span>]) &#123;</div><div class="line">        <span class="comment">//在这里使用temp[j]&lt;item来做for循环的判定条件值得学习，使得代码更简洁</span></div><div class="line">       <span class="keyword">for</span> (j = k - <span class="number">1</span>; temp[j] &lt; item; j--) </div><div class="line">       		temp[j+<span class="number">1</span>] = temp[j];</div><div class="line">       temp[j+<span class="number">1</span>] = item; <span class="comment">//重中之重，记住是插入到j+1的位置</span></div><div class="line">       temp.pop();</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'every time insert into a new element, the results is: '</span> + temp);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(temp);</div><div class="line"><span class="built_in">console</span>.log(temp[k - <span class="number">1</span>]);</div></pre></td></tr></table></figure></p>
<p>上面代码中注释的地方是容易出错的地方，需要好好体会。</p>
<p>上面这两种方法在输入数据少的时候，效果还可以，但是当数据量超大了，就不能短时间内给出结果了，所以这两种方法都不算好的算法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一组N个数，找出其中第k个最大数？&lt;br&gt;最直观的做法是对这N个数进行降序排序，然后输出第k个数即可。&lt;br&gt;另一种是构建一个临时数组存放取出k个数，进行降序排序,然后依次读取剩余的数，比较其与临时数组中的第k个数，若小则放弃，否则安装选择排序的思路对该数进行排序，最后
    
    </summary>
    
    
      <category term="算法 数据结构" scheme="http://jadestrong.com/tags/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>配置shell的环境变量</title>
    <link href="http://jadestrong.com/2016/09/24/%E9%85%8D%E7%BD%AEshell%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>http://jadestrong.com/2016/09/24/配置shell的环境变量/</id>
    <published>2016-09-24T08:24:33.000Z</published>
    <updated>2016-09-28T15:11:48.246Z</updated>
    
    <content type="html"><![CDATA[<p>在配置npm的时候，为了解决使用npm安装包的权限问题，我们将所安装包都统一安装到了<code>~/.npm-global</code>目录下，然后通过配置文件使得添加环境变量使得终端可以读取到npm安全的全局命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#创建存放文件夹</div><div class="line">mkdir ~/.npm-gloabl</div><div class="line">#配置npm使用该文件夹</div><div class="line">npm set prefix &apos;~/.npm-global&apos;</div><div class="line">#打开或着创建一个~/.profile文件，添加如下命令</div><div class="line">export PATH=~/.npm-global/bin:$PATH</div><div class="line">#回到命令行，更新系统变量</div><div class="line">source ~/.profile</div></pre></td></tr></table></figure></p>
<p>解读一下上面的命令：<br><code>$PATH</code>就是系统的命令地址等，而export句命令是将 <code>~/.npm-global/bin</code>拼接到已有的路径上，再重新赋值给该变量。 <code>:</code>是变量之间的分割符。</p>
<p>上面都是配置到 <code>~/.profile</code>文件下的，系统会到启动时读取该文件，所以系统的终端程序能够读取里面的配置。但是在emacs中嵌入的shell却读取不到在该文件中配置的语句，所以我在 <code>~/.bashrc</code>文件下，把上面那句加上了，这样每个shell终端启动应该都可以读取这个配置。</p>
<p>另外一个问题是，emacs内置的eshell程序却只能读取到系统级别的命令，如 <code>/usr/bin</code>等目录下的命令，所以通过npm指定的命令还是不起作用，目前可以找到的方法是为emacs添加环境变量来解决，但怎么加，还得再研究下。<br>由于上面这个问题导致的，通过npm安装的全局命令如<code>js-beautify</code>等命令不能使用，例如在<code>web-beautify</code>这个elisp插件会调用该命令去处理文件的格式化，由于访问不到该命令所以会失败，提示让通过 <code>npm -g install js-beautify</code>来安装，但是我们已经安装了，所以还是需要继续解决这个问题。</p>
<p>注：在检查环境变量时，在命令行中直接的输入 <code>env</code>即可查看。</p>
<p>这两个问题都需要设计emacs的环境变量来解决：改环境变量有两种方法，一种是使用 <code>exec-path-from-shell</code>，然而本人并没有改成功，应该是没弄明白文档中是怎么用的，另一种是使用<code>Exec Path</code>,也就是直接在配置文件中设置环境变量，如 <code>.emacs</code>或 <code>init.el</code>,又或者是supacemacs的<code>.init.el</code>的user-config中设置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(setqenv &quot;PATH&quot; (concat (getenv &quot;PATH&quot;) &quot;:/home/jadestong/.npm-global/bin&quot;))</div><div class="line">(setq exec-path (append exec-path &apos;(&quot;/home/jadestrong/.npm-global/bin&quot;)))</div></pre></td></tr></table></figure></p>
<p>上面设置了两个变量，一个是PATH，这个是给shell程序使用的，也就是eshell以及emacs中的shell都可以调用npm安装的全局命令了，有了这个应该就不用再修改 <code>.bashrc</code>文件了；另一个exec-path就是给elisp程序使用的了，对于一些如locate等系统命令都是走的这条路，所以在使用 <code>js-beautify</code>等命令时都需要设置这个变量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在配置npm的时候，为了解决使用npm安装包的权限问题，我们将所安装包都统一安装到了&lt;code&gt;~/.npm-global&lt;/code&gt;目录下，然后通过配置文件使得添加环境变量使得终端可以读取到npm安全的全局命令：&lt;br&gt;&lt;figure class=&quot;highlight 
    
    </summary>
    
    
      <category term="emacs shell env" scheme="http://jadestrong.com/tags/emacs-shell-env/"/>
    
  </entry>
  
  <entry>
    <title>一些笔试题目整理</title>
    <link href="http://jadestrong.com/2016/09/22/%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE%E6%95%B4%E7%90%86/"/>
    <id>http://jadestrong.com/2016/09/22/一些笔试题目整理/</id>
    <published>2016-09-22T03:52:49.000Z</published>
    <updated>2016-09-28T15:07:30.539Z</updated>
    
    <content type="html"><![CDATA[<p>1.假设需实现构造函数Scope，它的特性如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scopeA = <span class="keyword">new</span> Scope();</div><div class="line">scopeA.title = <span class="string">'My title'</span>;</div><div class="line"><span class="keyword">var</span> scopeB = scopeA.$clone();</div><div class="line"><span class="comment">// 实例有$clone方法用创建一个对象克隆，表现如下</span></div><div class="line"><span class="built_in">console</span>.log(scopeB.title === <span class="string">'My title'</span>); <span class="comment">//输出 true</span></div><div class="line">scopeA.title = <span class="string">'Home title'</span>;</div><div class="line"><span class="built_in">console</span>.log(scopeB.title === <span class="string">'Home title'</span>); <span class="comment">//输出true</span></div><div class="line"><span class="comment">//但是一旦scopeB主动修改它的属性，scopeA并不受影响</span></div><div class="line">scopeB.title = <span class="string">'scopeB title'</span>;</div><div class="line"><span class="built_in">console</span>.log(scopeA.title === <span class="string">'Home title'</span>); <span class="comment">//输出 true</span></div></pre></td></tr></table></figure></p>
<p>请实现满足这个条件构造函数Scope（只需要实现上述描述需求即可）；<br>解答：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Scope</span>  (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Scope.prototype.$clone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="keyword">this</span>, &#123;</div><div class="line">        <span class="keyword">constructor</span>: &#123;</div><div class="line">            value: Scope,</div><div class="line">            enumerable: <span class="literal">true</span>,</div><div class="line">            writeable: <span class="literal">true</span>,</div><div class="line">            configurable: <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>2.<img src="file:///home/jadestrong/Pictures/Screenshot from 2016-08-01 19-59-44.png" alt="题目图片"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3.使用HTML+CSS实现如图布局，border-width:5px,格子大小是50px*50px,hover时边框变成红色，需要考虑语义化。<br><img src="file:////home/jadestrong/Pictures/table.png" alt="题目图片"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">     .table &#123;</div><div class="line">       display: table;</div><div class="line">       border-collapse: collapse;</div><div class="line">     &#125;</div><div class="line">     .row &#123;</div><div class="line">       display: table-row;</div><div class="line">     &#125;</div><div class="line">     .cell &#123;</div><div class="line">       display:table-cell;</div><div class="line">       width: 50px;</div><div class="line">       height: 50px;</div><div class="line">       border: 5px solid blue;</div><div class="line">     &#125;</div><div class="line">     .cell:hover &#123;</div><div class="line">       border-color: red;</div><div class="line">     &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cell"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.假设需实现构造函数Scope，它的特性如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jadestrong.com/2016/09/21/hello-world/"/>
    <id>http://jadestrong.com/2016/09/21/hello-world/</id>
    <published>2016-09-21T01:03:45.769Z</published>
    <updated>2016-09-21T01:03:45.769Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>360笔试</title>
    <link href="http://jadestrong.com/2016/09/21/360%E7%AC%94%E8%AF%95/"/>
    <id>http://jadestrong.com/2016/09/21/360笔试/</id>
    <published>2016-09-21T00:43:23.000Z</published>
    <updated>2016-09-21T00:43:23.999Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>360笔试练习题分析</title>
    <link href="http://jadestrong.com/2016/09/19/360%E7%AC%94%E8%AF%95%E7%BB%83%E4%B9%A0%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>http://jadestrong.com/2016/09/19/360笔试练习题分析/</id>
    <published>2016-09-19T13:24:38.000Z</published>
    <updated>2016-09-28T14:36:16.780Z</updated>
    
    <content type="html"><![CDATA[<p>1.某一系统功能，需要一次性加载N（N在1000左右）个随机数，后续只对该集合执行遍历操作，最宜采用那种数据结构？ 链表</p>
<p><strong>数组</strong>：连续存储，遍历快且方便，长度固定，缺点：移除和添加  对于长度固定，在某些场合也是一个缺陷；<br><strong>链表</strong>：离散存储，添加删除方便，空间和时间消耗大；双向链表较方便，但空间消耗更大；<br><strong>Hash表</strong>：数据离散存储，利用hash算法确定存储位置，遍历麻烦；<br><strong>二叉树</strong>：一般的查找遍历有深度优先和广度优先，遍历分前续、中序和后序，效率都差不多，如果数据经过排序，效率还是很不错的；<br><strong>图</strong>:表示物件与物件之间关系的数学对象，常用遍历方式有深度优先遍历和广度优先遍历，这两种方式对有向和无向图均可以，遍历查找不及前面任何一种结构。</p>
<p>2.精俭排序，即一对数据不进行两次或两次以上的比较，以下是精俭排序的是： 插入排序、归并排序。</p>
<p> <strong>插入排序</strong>： 该排序一般从第二个元素开始遍历，依次与前一个比较，若小于，则将该元素依次与前面所有的元素比较，将比它大的元素依次后移，为该元素腾出位置将其放入即可；若大于，则维持该顺序，所以在整个排序过程中，没两个元素之间仅比较了一次。即精俭排序。<br> <strong>归并排序</strong>:  精俭排序<br> <strong>选择排序</strong>： 一般选择排序都是将当前元素与其后面的所有元素进行比较，找出其后的最小元素，交互它们的位置，所以在比较过程中会进行多次比较，即非精俭排序。<br> <strong>堆排序</strong>: 非精俭排序</p>
<h2 id="3-下面不是面向对象的基本原则的是：-抽象类原则（Abstruct-Class-principle"><a href="#3-下面不是面向对象的基本原则的是：-抽象类原则（Abstruct-Class-principle" class="headerlink" title="3. 下面不是面向对象的基本原则的是： 抽象类原则（Abstruct-Class principle);"></a>3. 下面不是面向对象的基本原则的是： 抽象类原则（Abstruct-Class principle);</h2><p><strong>单一职责原则（Single-Resposibility principle)</strong>：就是一个类只负责一个职责，只有一个引起变化的原因。<br><strong>开放封闭原则（Open-Closed principle)</strong>：这是所有面向对象原则的核心，软件设计本身所追求的目标就是封装变化，降低耦合，而开放封闭原则正是对这一目标的最直接提现。即软件实体应该对外扩展开放，而对修改封闭。<br><strong>依赖倒置原则（Dependecy-Inversion principle)</strong>:就是要依赖于抽象，不要依赖于具体。简单的说就是对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块之间的耦合。一般就是下层依赖上层，下层的修改不会影响上层。<br><strong>迪米特法则</strong>：又叫最少知识原则（Least Knowledge principle),就是说一个对象应当对其他对象有尽可能少的了解。<br><strong>组合/聚集复用原则（Composite/Aggregate Reuse principle)</strong>：顾名思义，组合/聚合和继承是实现复用的两个基本途径，合成复用原则是指尽量使用合成/聚合，而不是使用继承。</p>
<p>4.接口是一种引用类型，在接口中可以声明（），但不能声明公有的域或私有的成员变量。</p>
<p>接口中只能包含方法、属性、索引器和事件的声明。不允许声明成员上的修饰符，即使是public都不行，因为接口成员都是公有的，也不能声明为虚拟和静态的。如果需要修饰符，最好让实现类来声明。所以对比一个类，接口的特性是：当定义一个类时，可以派生自多重接口，而你只能可以从一个类派生。</p>
<p>6.flash和js通过什么类，如何交互?</p>
<p>使用ExternalInterface类进行交互。 </p>
<p>7.设一个链表最常用的操作是在末尾插入结点和删除尾结点，则选用（）最节省时间？</p>
<p>带头结点的双循环链表</p>
<p>8.用有向无环图描述表达式（A+B)*((A+B)/A)，至少需要顶点的数目为（）。5</p>
<p>一些额外的知识点记录下来：<br>1.对Web标准和W3C规范的理解？<br>Web标准简单来说分为三部分，即html,css和javascript，也就是常说的结构、表现和行为，web标准一般是把这三部分独立分开，使其更具有模块化。<br>W3C对web标准提出了规范化的要求，也就是在实际开发中的一些代码规范。<br>2.列举块级元素和行内元素：<br>行内元素：a，em，strong，span,i,b,img,input,label,select,textarea,sub,sup,q<br>块级元素：div,ul,li,dd,dt,dl,ol,p,h1~h6,table,form,fieldset<br>3.列举浏览器的内核：<br>IE：Trident,Chrome：Webkit，Firefox：Gecko<br>4.Ajax中post和get请求的区别？<br>使用get请求时，参数在URL中显示，而post不是，其将参数放在body中，不会直接显示出来；<br>使用get传递参数大小有限制，大约在1k左右，这个限制并不是http协议规定，应该是浏览器对URL的大小有限制，所以也就相当于限制了参数的大小，而post对参数大小没有限制；<br>get请求默认是会被浏览器缓存的，因为对于同一URL，浏览器会认为其结果是一样的，所以当第二次请求时会直接使用上一次的结果，而浏览器认为post请求是变动的，所以其请求不会被缓存，另外若要避免缓存get请求，则给get请求添加一个参数如?t=new Date(),可达到目的；<br>在使用ajax的xhr对象发送请求时，由于get请求不会在请求体中传递参数，所以需要传递一个null参数，而post直接传递参数即可；<br>post请求必须设置header的Content-type的值为application/x-form-www-urlencoded，确保服务器知道实体中有参数变量，可以使用xmlHttpRequest对象的setRequestHeader(‘Content-type’,’application/x-form-www-urlencoded’)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.某一系统功能，需要一次性加载N（N在1000左右）个随机数，后续只对该集合执行遍历操作，最宜采用那种数据结构？ 链表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt;：连续存储，遍历快且方便，长度固定，缺点：移除和添加  对于长度固定，在某些场合也是一个缺陷；&lt;br
    
    </summary>
    
    
      <category term="数据结构 java" scheme="http://jadestrong.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-java/"/>
    
  </entry>
  
  <entry>
    <title>LocalStorage的使用</title>
    <link href="http://jadestrong.com/2016/09/17/LocalStorage%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://jadestrong.com/2016/09/17/LocalStorage的使用/</id>
    <published>2016-09-17T03:48:29.000Z</published>
    <updated>2016-09-21T01:03:45.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LocalStorage的使用"><a href="#LocalStorage的使用" class="headerlink" title="LocalStorage的使用"></a>LocalStorage的使用</h1><p>首先，了解一下localStorage的信息，它是Web Storage API的一部分，另一部分是sessionStorage。在使用上，这两者的API的是一样的，不过localStorage是可以用于离线存储数据，而sessionStorage当浏览器关闭时，数据会丢失。</p>
<ul>
<li>storage.getItem(key): 根据给定的key，返回存储的数据；</li>
<li>storage.removeItem(key): 移除匹配key的数据；</li>
<li>storage.set(key, value): 使用给定键值存储响应的给定值；</li>
<li>storage.clear(): 清空storage的内容。</li>
</ul>
<p>除了使用上面的接口函数，还可以直接使用诸如<code>storage.key = value;</code>等快捷方式来存储数据。<br>另外，localStorage和sessionStorage合计有10M空间可用。</p>
<p>然后，它们的存储的都是字符串，所以我们不论存储和取出的都是字符串格式，当我们想得到保存的对象时并不理想，所以可以使用<code>JSON.parse()和JSON.stringify()</code>来对要存储的以及要取出的数据进行预处理。</p>
<p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">export default storage =&gt; (&#123;</div><div class="line">    get(k) &#123;</div><div class="line">        try &#123;</div><div class="line">            return JSON.parse(storage.getItem(k));</div><div class="line">        &#125; catch (e) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    set(k, v) &#123;</div><div class="line">        storage.set(k, JSON.stringify(v));</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LocalStorage的使用&quot;&gt;&lt;a href=&quot;#LocalStorage的使用&quot; class=&quot;headerlink&quot; title=&quot;LocalStorage的使用&quot;&gt;&lt;/a&gt;LocalStorage的使用&lt;/h1&gt;&lt;p&gt;首先，了解一下localStorag
    
    </summary>
    
    
      <category term="localStorage,wrap" scheme="http://jadestrong.com/tags/localStorage-wrap/"/>
    
  </entry>
  
  <entry>
    <title>DIY一个自己的jQuery1</title>
    <link href="http://jadestrong.com/2016/09/15/DIY%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84jQuery1/"/>
    <id>http://jadestrong.com/2016/09/15/DIY一个自己的jQuery1/</id>
    <published>2016-09-15T07:11:50.000Z</published>
    <updated>2016-09-21T01:03:45.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DIY一个自己的jQuery1"><a href="#DIY一个自己的jQuery1" class="headerlink" title="DIY一个自己的jQuery1"></a>DIY一个自己的jQuery1</h1><p>jQuery在调用的时候并没有让我们去实例化一个jquery对象实例，然后再调用其自定义的方法，而是可以直接使用诸如<code>jQuery</code>或着更常见的<code>$()</code>方法。下面我们自己探索下它是如何实现的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var $div = $(&apos;div&apos;);</div><div class="line"></div><div class="line">(function() &#123;</div><div class="line">  var _jQuery = window.jQuery,</div><div class="line">      _$ = window.$;</div><div class="line"></div><div class="line">  var version = &apos;0.0.1&apos;,</div><div class="line">      jQuery = function(selector) &#123;</div><div class="line">        console.log(document.querySelector(selector));</div><div class="line">      &#125;;</div><div class="line">  jQuery.prototype = &#123;</div><div class="line">    jquery: version,</div><div class="line">    constructor: jQuery</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  window.$ = window.jQuery = function(selector) &#123;</div><div class="line">    return new jQuery(selector); // 在接口函数中定义了方法，而调用接口返回的是new初始化的实例</div><div class="line">  &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DIY一个自己的jQuery1&quot;&gt;&lt;a href=&quot;#DIY一个自己的jQuery1&quot; class=&quot;headerlink&quot; title=&quot;DIY一个自己的jQuery1&quot;&gt;&lt;/a&gt;DIY一个自己的jQuery1&lt;/h1&gt;&lt;p&gt;jQuery在调用的时候并没有让我们
    
    </summary>
    
    
      <category term="jquery,javascript" scheme="http://jadestrong.com/tags/jquery-javascript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery源码分析1</title>
    <link href="http://jadestrong.com/2016/09/14/jQuery%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/"/>
    <id>http://jadestrong.com/2016/09/14/jQuery源码分析1/</id>
    <published>2016-09-14T13:50:32.000Z</published>
    <updated>2016-09-21T01:03:45.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery源码分析1"><a href="#jQuery源码分析1" class="headerlink" title="jQuery源码分析1"></a>jQuery源码分析1</h2><p>该部分分析一下jquery的选择器这块，试着分析一下，在实战中好像经常会考查这部分知识。</p>
<p>先从一个正则开始：<code>/^[^&lt;]*(&lt;[\w\W]+&gt;)[^&gt;]*$/</code>这个正则表达式所要匹配的是包含html元素的字符串。</p>
<ul>
<li>符合条件的字符串必须包含一个<code>&lt;&gt;</code>标签，对于位置并没有限定，<del>前后都可以有其他非<code>&lt;&gt;</code>字符</del>。<br>此处是前后结尾并没有任何限制，虽然指定了<code>^[^&lt;]</code>和<code>[^&gt;]$</code>，但是后面都跟了一个<code>*</code>表示可以有任意数量，当然包括0个，而里面则是一个标准的模式，必须是以<code>&lt;</code>和<code>&gt;</code>来开头和结尾的字符串，所以即使后面多跟一个<code>&gt;</code>也无所谓，因为它会匹配<code>[\w\W]+</code>,所以这个正则匹配的是一个包含html元素的字符串。</li>
</ul>
<p>再来看另一个正则表达式：<code>/^#([\w-]+)$/</code>,该表达式很明显是匹配一个ID选择器。该选择规定了选择器的规则，必须是由字母和-组成，且以#开头。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jQuery源码分析1&quot;&gt;&lt;a href=&quot;#jQuery源码分析1&quot; class=&quot;headerlink&quot; title=&quot;jQuery源码分析1&quot;&gt;&lt;/a&gt;jQuery源码分析1&lt;/h2&gt;&lt;p&gt;该部分分析一下jquery的选择器这块，试着分析一下，在实战中好像经
    
    </summary>
    
    
      <category term="jquery javascript" scheme="http://jadestrong.com/tags/jquery-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Git的基本指令</title>
    <link href="http://jadestrong.com/2016/09/14/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/"/>
    <id>http://jadestrong.com/2016/09/14/Git的基本指令/</id>
    <published>2016-09-14T12:51:43.000Z</published>
    <updated>2016-09-21T01:03:45.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git的基本指令之远程分支的拉取和本地分支的提交"><a href="#Git的基本指令之远程分支的拉取和本地分支的提交" class="headerlink" title="Git的基本指令之远程分支的拉取和本地分支的提交"></a>Git的基本指令之远程分支的拉取和本地分支的提交</h2><p>当我们在本地拥有多个分支时，需要知道我们当前是在哪一个分支，此时使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git branch -a</div><div class="line">//输出如下</div><div class="line">* source</div><div class="line">  remotes/origin/master</div><div class="line">  remotes/origin/source</div></pre></td></tr></table></figure></p>
<p>上面的输出显示，在远程端拥有两个分支，其一是master，这个是我们在创建Repo时生成的；<br>之后，我们又在远程端创建了一个source分支，在本例中是存放的Blog项目的源码，而master分支中则是我们博客的静态文件。</p>
<p>所以，当我们创建了新的博客并部署之后，其实是将文件部署到了master的分支中，而对源码的备份则需要将代码push到source分支。</p>
<p>而在远程端进行操作之后，又如何将远程分支同步到本地分支呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin source // 将远程指定分支source拉取到本地当前分支</div></pre></td></tr></table></figure></p>
<p>使用pull会拉取并合并，而使用fetch则只会拉取，然后需要使用merge来合并。</p>
<p>当将本地代码提交时，如过远程存在多个分支的话，也需要指定提交到那个分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin source // 将本地分支提交到远程分支</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git的基本指令之远程分支的拉取和本地分支的提交&quot;&gt;&lt;a href=&quot;#Git的基本指令之远程分支的拉取和本地分支的提交&quot; class=&quot;headerlink&quot; title=&quot;Git的基本指令之远程分支的拉取和本地分支的提交&quot;&gt;&lt;/a&gt;Git的基本指令之远程分支的
    
    </summary>
    
    
      <category term="git" scheme="http://jadestrong.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>配置Emacs为Markdown编辑器</title>
    <link href="http://jadestrong.com/2016/09/13/%E9%85%8D%E7%BD%AEEmacs%E4%B8%BAMarkdown%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://jadestrong.com/2016/09/13/配置Emacs为Markdown编辑器/</id>
    <published>2016-09-13T00:51:08.000Z</published>
    <updated>2016-09-21T01:03:45.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置Markdown编辑器"><a href="#配置Markdown编辑器" class="headerlink" title="配置Markdown编辑器"></a>配置Markdown编辑器</h2><p>首先是安装<code>markdown-mode</code>,这个可以参考该文档；<br>然后，如果本地没有配置<code>markdown</code>命令来将<code>.md</code>文件转换成<code>.html</code>文件的话，会爆出<code>bash error: no markdown commond</code>等错误，此时需要在本地安装一个markdown编译器，例如pandoc(由于该编译器的原生命令为<code>pandoc</code>，所以还需要配置需要的markdown命令),如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//创建一个markdown名称的文件，不要文件名</div><div class="line">touch markdown</div><div class="line">//编辑它,此处$1是占位符，用于需要处理的文件</div><div class="line">pandoc -f markdown -t html -s --mathjax --highlight-style pygments --from markdown-yaml_metadata_block $1</div><div class="line">//然后将该文件放到/usr/bin目录中</div><div class="line">su -c &apos;mv markdown /usr/bin&apos;</div><div class="line">//并为它添加可执行权限</div><div class="line">su -c &apos;chmod a+x /usr/bin/markdown</div></pre></td></tr></table></figure></p>
<p>经过上面的配置，现在应该已经可以使用emacs或调用浏览器来预览md文件了。</p>
<p>另外，我们还可以使用emacs支持的eww浏览器来在emacs中实现预览：<code>C+c C+c l</code>即可。</p>
<p>此时，并不能实现实时预览，只有我们按下保存按钮之后，才能后更新预览，在这可以配置emacs的自动保存，需要下载<code>auto-save.el</code>文件：<a href="https://github.com/manateelazycat/deepin-emacs/blob/master/site-lisp/extensions/lazycat/auto-save.el" target="_blank" rel="external">https://github.com/manateelazycat/deepin-emacs/blob/master/site-lisp/extensions/lazycat/auto-save.el</a></p>
<p>并修改<code>.emacs</code>文件,该文件存放在<code>~/</code>路径下，如果没有可以创建，另外也可以修改<code>~/.emacs.d/init.el</code>文件，这两个文件都是等价的，emacs启动时会读取这些文件并加载定义的插件。<br>文件配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//这一句是必须的，用于指定扩展插件的路径</div><div class="line">(add-to-list &apos;load-path (expand-file-name &#123;path to package directory&#125;  user-emacs-directory))</div><div class="line">//下面是加载模块的代码</div><div class="line">(require &apos;auto-save)            ;; 加载自动保存模块</div><div class="line"></div><div class="line">(auto-save-enable)              ;; 开启自动保存功能</div><div class="line">(setq auto-save-slient t)       ;; 自动保存的时候静悄悄的， 不要打扰我</div></pre></td></tr></table></figure>
<p>至此，已经配置好了自动保存功能，当编辑markdown文件时，可以实现自动保存并刷新展示。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置Markdown编辑器&quot;&gt;&lt;a href=&quot;#配置Markdown编辑器&quot; class=&quot;headerlink&quot; title=&quot;配置Markdown编辑器&quot;&gt;&lt;/a&gt;配置Markdown编辑器&lt;/h2&gt;&lt;p&gt;首先是安装&lt;code&gt;markdown-mode&lt;/
    
    </summary>
    
    
      <category term="markdown emacs" scheme="http://jadestrong.com/tags/markdown-emacs/"/>
    
  </entry>
  
  <entry>
    <title>React之Alt架构分析</title>
    <link href="http://jadestrong.com/2016/09/12/React%E4%B9%8BAlt%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <id>http://jadestrong.com/2016/09/12/React之Alt架构分析/</id>
    <published>2016-09-12T13:58:53.000Z</published>
    <updated>2016-09-21T01:03:45.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React之Alt架构分析"><a href="#React之Alt架构分析" class="headerlink" title="React之Alt架构分析"></a>React之Alt架构分析</h2><p>在使用Alt时，首先需要实例化一个alt实例，将其定义为一个单例模块，然后对其做一些必要的配置，然后就可以将它导出，当在项目中需要时可以执行引入，而不用每次都实例化了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import Alt from &apos;alt&apos;;</div><div class="line">import makeFinalStore from &apos;alt-utils/lib/makeFinalStore&apos;;</div><div class="line"></div><div class="line">class Flux extends Alt &#123;</div><div class="line">	constructor(config) &#123;</div><div class="line">		super(config);</div><div class="line">		this.FinalStore = makeFinalStore(this);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const flux = new Flux();</div><div class="line"></div><div class="line">export default flux;</div></pre></td></tr></table></figure></p>
<p>在上面我们还使用了<code>alt-utils</code>的makeFinalStore,这个是用来监视所有的store都修改完毕之后，可以做最后处理。 ？</p>
<p>当定义好了alt实例，下面是需要将它配置到React项目中去，需要在Provider中配置，首先介绍下Provider的概念，这是Alt架构的两个概念之一，另一个是connect负责将action等连接到组件中去。至于Provider更多的是一个可扩展接口，其实可以将其直接嵌入到组件中，但是区分开来更加容易定制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import AltContainer from &apos;alt-container&apos;;</div><div class="line">import chromeDebug from &apos;alt-utils/lib/chromeDebug&apos;;</div><div class="line">import alt from &apos;../../libs/alt&apos;;</div><div class="line">import setup from &apos;./setup&apos;;</div><div class="line"></div><div class="line">setup(alt); //这个用来对alt做一些通用的配置</div><div class="line"></div><div class="line">chromeDebug(alt); //这个是一个debug组件，结合chrome插件调试alt</div><div class="line"></div><div class="line">React.Pref = require(&apos;react-addons-perf&apos;); // 这个好像是性能分析工具</div><div class="line"></div><div class="line">export default (&#123;children&#125;) =&gt;</div><div class="line">	&lt;AltContainer flux=&#123;alt&#125;&gt;</div><div class="line">		&#123;children&#125;</div><div class="line">	&lt;/AltContainer&gt;</div></pre></td></tr></table></figure></p>
<p>在导出部分，使用了<code>AltContainer</code>，这个东西可以为子组件传入<code>this.props</code>属性信息，可以分开定义，也可以使用我们定义的<code>alt</code>。</p>
<p>在传入alt之前，我们需要将store绑定到alt中，这个操作就是在<code>setup.js</code>中做的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import NoteStore from &apos;../../stores/NoteStore&apos;;</div><div class="line"></div><div class="line">export default alt =&gt; &#123;</div><div class="line">	alt.addStore(&apos;NoteStore&apos;, NoteStore);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就会将NoteStore通过alt实例，在AltContainer中传入{children}中，在组件中可以通过<code>this.props</code>来访问。</p>
<p><strong>注意：</strong>此处在参数传递中还有困惑，即：是将NoteStore直接传入了组件的<code>props</code>属性，还是通过<code>connect</code>函数来做的？ 在后面看来这些都是在connect中做的处理。这一点在主组件文件<code>app.jsx</code>中也可以看，组件App是作为参数传入了connect函数，而最后导出的是connect函数最终执行的结果，即将修订后的App组件返回并在后续进行渲染</p>
<p>分析下connect函数所起的作用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line"></div><div class="line">export default (state, actions) =&gt; &#123;</div><div class="line">	if (typeof state === &apos;function&apos; || </div><div class="line">		(typeof state === &apos;object&apos; &amp;&amp; Object.keys(state).length)) &#123;</div><div class="line">		return target =&gt; connect(state, actions, target);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	return target =&gt; props =&gt;(</div><div class="line">		&lt;target &#123;...Object.assign(&#123;&#125;, props, actions)&#125; /&gt;</div><div class="line">	);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function connect(state = () =&gt; &#123;&#125;, actions = &#123;&#125;, target) &#123;</div><div class="line">	class Connect extends React.Component &#123;</div><div class="line">		constructor() &#123;</div><div class="line">			super();</div><div class="line">			this.handleChange = this.handleChange.bind(this);</div><div class="line">		&#125;</div><div class="line">		componentDidMount() &#123;</div><div class="line">			const &#123;flux&#125; = this.context;</div><div class="line">			flux.FinalStore.listen(this.handleChange);</div><div class="line">		&#125;</div><div class="line">		componentWillUnMount() &#123;</div><div class="line">			const &#123;flux&#125; = this.context;</div><div class="line">			flux.FinalStore.unlisten(this.handleChange);</div><div class="line">		&#125;</div><div class="line">		render() &#123;</div><div class="line">			const &#123;flux&#125; = this.context;</div><div class="line">			const stores = flux.stores;</div><div class="line">			const composedStores = composeStores(stores);</div><div class="line"></div><div class="line">			return React.createElement(target, </div><div class="line">				&#123;...Object.assign(&#123;&#125;, this.props, state(composedStores), actions)&#125;);</div><div class="line">		&#125;</div><div class="line">		handleChange() &#123;</div><div class="line">			this.forceUpdate();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	Connect.contextTypes = &#123;</div><div class="line">		flux: React.PropTypes.object.isRequired</div><div class="line">	&#125;</div><div class="line">	return Connect;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function composeStores(stores) &#123;</div><div class="line">	let ret = &#123;&#125;;</div><div class="line">    </div><div class="line">	Object.keys(stores).forEach(k =&gt; &#123;</div><div class="line">		const store = stores[k];</div><div class="line">		ret = Object.assign(&#123;&#125;, ret, store.getState());</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	return ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先，这是一个高层函数，即它会根据参数的不同而返回另一个不同的函数，当参数state是一个函数或者对象时，会返回一个生成新组件的新函数，否则会返回一个函数，直接将传入的组件添加上属性进行返回。<br>新组件在渲染时会将传入的<code>React 类</code>使用<code>React.createElement</code>进行渲染处理，这其实是一层包装，用于为组件绑定响应的属性，如this.props、store、action等，当返回时就可以在组件中直接访问这些属性了。</p>
<p>流程：<br><code>&lt;Provider&gt;&lt;App /&gt;&lt;/Provider&gt;</code>(index.jsx) =&gt;<br><code>{childre} =&gt; &lt;AltContainer flux={alt}&gt; {children} &lt;/AltContainer&gt;</code>(Provier.dev.jsx) =&gt;<br><code>export default connect(({notes}) =&gt; ({notes}), {NoteActions})(App);</code>(app.jsx) =&gt;<br><code>React.createElement(target, {...Object.assign({}, this.props, state(composedStores), actions)});</code>(connect.jsx) =&gt;</p>
<p>首先是将App（此时的App其实是connect的返回，是一个包装之后的全新的组件）作为参数传入Provider，Provider通过AltContainer将alt传给connect返回的组件Connect，在Connect组件渲染时中可以通过<code>this.context</code>访问传入的alt，从中拿到flux，以及flux中的NoteStore,然后就可以将store和之前传入的action等绑定到该新创建的组件中。</p>
<p>至此，基本是React集成Alt的一个基本的过程，这些也就是对思路的一个基本梳理，后面还需要理解以及修补。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React之Alt架构分析&quot;&gt;&lt;a href=&quot;#React之Alt架构分析&quot; class=&quot;headerlink&quot; title=&quot;React之Alt架构分析&quot;&gt;&lt;/a&gt;React之Alt架构分析&lt;/h2&gt;&lt;p&gt;在使用Alt时，首先需要实例化一个alt实例，将其定
    
    </summary>
    
    
      <category term="react、alt" scheme="http://jadestrong.com/tags/react%E3%80%81alt/"/>
    
  </entry>
  
  <entry>
    <title>备份Blog源码--git学习</title>
    <link href="http://jadestrong.com/2016/09/12/%E5%A4%87%E4%BB%BDBlog%E6%BA%90%E7%A0%81-git%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jadestrong.com/2016/09/12/备份Blog源码-git学习/</id>
    <published>2016-09-12T10:30:30.000Z</published>
    <updated>2016-09-21T01:03:45.769Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在使用Hexo进行博客部署时，仅将生成的静态博客文件上传到了github中，通过GitHub Page进行展示，但是项目的源码都是存储到本地的，所以这样做不是很安全，完全有可能发生源码丢失这种问题，所以在这里建立github分支来存储源码。</p>
</blockquote>
<p>命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git init  // 默认这个文件夹是没有进行git初始化的</div><div class="line"></div><div class="line">git remote add origin &#123;your-git-repo-url&#125;  //这个是添加一个新的远程仓库</div><div class="line">git checkout -b source  //这是检出一个分支么？</div><div class="line">git push origin source  //这个是将谁推给谁呢，目前看可能是origin -&gt; source？</div></pre></td></tr></table></figure>
<p>在这里曾出现一个问题：<code>error: src refspec {branch name,如source} does not match any</code>:</p>
<blockquote>
<p>这个是因为推送的目录中没有文件，应该先将当前目录的文件都添加上去：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m &apos;some thing&apos;</div><div class="line">git push origin source //即可成功</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在使用Hexo进行博客部署时，仅将生成的静态博客文件上传到了github中，通过GitHub Page进行展示，但是项目的源码都是存储到本地的，所以这样做不是很安全，完全有可能发生源码丢失这种问题，所以在这里建立github分支来存储源码。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇在线博客</title>
    <link href="http://jadestrong.com/2016/08/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%9C%A8%E7%BA%BF%E5%8D%9A%E5%AE%A2/"/>
    <id>http://jadestrong.com/2016/08/09/我的第一篇在线博客/</id>
    <published>2016-08-09T03:28:19.000Z</published>
    <updated>2016-09-21T01:03:45.772Z</updated>
    
    <content type="html"><![CDATA[<p>##难道就这么写吗</p>
<p>搭建自己的博客，还得卖域名啊，这么贵。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function () &#123;</div><div class="line">    console.log(&apos;Hello World!&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##难道就这么写吗&lt;/p&gt;
&lt;p&gt;搭建自己的博客，还得卖域名啊，这么贵。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div
    
    </summary>
    
    
  </entry>
  
</feed>
